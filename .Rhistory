if(length(setdiff(display_pt$country, old$country))>0){
warning('Countries with points have been added, will need to update the point map')
}
write.csv(display_pt, "assets/maps/regions_point.csv", row.names=FALSE)
display_pt
View(display_list)
View(display_pt)
## regions_get_master_list.r
# April 29, 2016 by @jules32
## Get master list of OHI and OHI+ countries from the private Google Spreadsheet 'OHI_CountriesMaster'
## for display on ohi-science.org/projects/ohi-assessments
## https://docs.google.com/spreadsheets/d/1Xh8-36cLCEa_bppqLJu-nukVgPDT8xVEd9nxEaPYKKg/edit#gid=2018368498
#### setup ----
library(googlesheets) # install.packages('googlesheets') # by Jenny Bryan
library(tidyverse)
library(readr)
## authorize googledocs -- requires user interaction with default browser
gs_auth(new_user = TRUE)
#### read in Google Sheet, previously gs_title('OHI_CountriesMaster')----
master_list <-  googlesheets::gs_url('https://docs.google.com/spreadsheets/d/1Xh8-36cLCEa_bppqLJu-nukVgPDT8xVEd9nxEaPYKKg/edit#gid=2018368498') %>%
googlesheets::gs_read()
head(master_list)
### archive copy of the Google Sheet in PRIVATE ohidev repo (not here); will need to push that repo too.
write.csv(master_list,
paste0('~/github/ohidev/OHI_CountriesMaster/OHI_CountriesMaster_', Sys.Date(), '.csv'))
#### parse information for display ----
## to be displayed, `display` column must have either 'point' or 'shapefile'
display_list <- master_list %>%
select(country     = Country,
ohi_plus    = OHI_plus,
phase       = Phase,
map_display = Map_Display,
display     = Display,
lat         = Latitude,
lon         = Longitude) %>%
filter(!is.na(display)) # remove rows that don't have point/shapefile
# tail(display_list)
## count number of active and completed OHI+ countries ----
n_ohi_plus <- display_list %>%
filter(ohi_plus == 'YES')
n_ohi_plus_active <- n_ohi_plus %>%
filter(phase == 'active')
cat(sprintf('Total count of OHI+ assessments is %s!', dim(n_ohi_plus)[1]))
cat(sprintf('And %s are active, %s are completed OHI+ assessments.',
dim(n_ohi_plus_active)[1],
dim(n_ohi_plus)[1]- dim(n_ohi_plus_active)[1]))
## filter shapefiles to display
display_shp <-  display_list %>%
filter(map_display == 'shapefile')
## determine whether any shapefiles have been added:
old <- read.csv("assets/maps/regions_shape.csv")
if(length(setdiff(display_shp$country, old$country))>0){
warning('Countries with shapefiles have been added, will need to update the shapefile map')
}
## filter point data to display
display_pt <-  display_list %>%
filter(map_display == 'point')
# error if not all fields have lat/lon data. See https://github.com/OHI-Science/issues/issues/625#issuecomment-217511758
if (NA %in% display_pt$lat | NA %in% display_pt$lon){
stop(sprintf('Missing lat or lon field for region to be displayed. Must fix or will not map proplerly.\n'))
}
## determine whether any points have been added:
old <- read.csv("assets/maps/regions_point.csv")
if(length(setdiff(display_pt$country, old$country))>0){
warning('Countries with points have been added, will need to update the point map')
}
if (nrow(display_pt) + nrow(display_shp) != nrow(display_list)) {
warning('please make sure all the countries to display have either shapefiles or lat/longs')
}
write.csv(display_shp, "assets/maps/regions_shape.csv", row.names=FALSE)
write.csv(display_pt, "assets/maps/regions_point.csv", row.names=FALSE)
master_list <-  googlesheets::gs_url('https://docs.google.com/spreadsheets/d/1Xh8-36cLCEa_bppqLJu-nukVgPDT8xVEd9nxEaPYKKg/edit#gid=2018368498') %>%
googlesheets::gs_read()
head(master_list)
View(master_list)
write.csv(master_list,
paste0('~/github/ohidev/OHI_CountriesMaster/OHI_CountriesMaster_', Sys.Date(), '.csv'))
display_list <- master_list %>%
select(country     = Country,
ohi_plus    = OHI_plus,
phase       = Phase,
map_display = Map_Display,
display     = Display,
lat         = Latitude,
lon         = Longitude) %>%
filter(!is.na(display)) # remove rows that don't have point/shapefile
display_list <- master_list %>%
dplyr::select(country     = Country,
ohi_plus    = OHI_plus,
phase       = Phase,
map_display = Map_Display,
display     = Display,
lat         = Latitude,
lon         = Longitude) %>%
filter(!is.na(display)) # remove rows that don't have point/shapefile
View(display_shp)
tail(display_list)
n_ohi_plus <- display_list %>%
filter(ohi_plus == 'YES')
n_ohi_plus_active <- n_ohi_plus %>%
filter(phase == 'active')
cat(sprintf('Total count of OHI+ assessments is %s!', dim(n_ohi_plus)[1]))
cat(sprintf('And %s are active, %s are completed OHI+ assessments.',
dim(n_ohi_plus_active)[1],
dim(n_ohi_plus)[1]- dim(n_ohi_plus_active)[1]))
## filter shapefiles to display
display_shp <-  display_list %>%
filter(map_display == 'shapefile')
## determine whether any shapefiles have been added:
old <- read.csv("assets/maps/regions_shape.csv")
if(length(setdiff(display_shp$country, old$country))>0){
warning('Countries with shapefiles have been added, will need to update the shapefile map')
}
## filter point data to display
display_pt <-  display_list %>%
filter(map_display == 'point')
# error if not all fields have lat/lon data. See https://github.com/OHI-Science/issues/issues/625#issuecomment-217511758
if (NA %in% display_pt$lat | NA %in% display_pt$lon){
stop(sprintf('Missing lat or lon field for region to be displayed. Must fix or will not map proplerly.\n'))
}
## determine whether any points have been added:
old <- read.csv("assets/maps/regions_point.csv")
if(length(setdiff(display_pt$country, old$country))>0){
warning('Countries with points have been added, will need to update the point map')
}
if (nrow(display_pt) + nrow(display_shp) != nrow(display_list)) {
warning('please make sure all the countries to display have either shapefiles or lat/longs')
}
write.csv(display_shp, "assets/maps/regions_shape.csv", row.names=FALSE)
write.csv(display_pt, "assets/maps/regions_point.csv", row.names=FALSE)
### This script creates the leaflet map for the ohi-science.org/projects/ohi-assessments
### NOTE: The two things created by leaflet must be moved after creation
## allRegions_files folder goes to: /projects/ohi-assessments. BY HAND! (for now). But do each time.
## allRegions.html         goes to: _includes/themes/OHI/maps
# For more information: http://zevross.com/blog/2014/04/11/using-r-to-quickly-create-an-interactive-online-map-using-the-leafletr-package/
# http://stackoverflow.com/questions/26435861/how-to-read-a-geojson-file-containing-feature-collections-to-leaflet-shiny-direc
# http://www.tuicode.com/article/5637dded499808840885af68
### Need to read in the shape files for each of these regions:
library(tidyverse)
library(sp)
library(rgdal)
library(raster)
# library(leafletR) # alternative method for visualization
library(leaflet)
library(htmlwidgets)
library(jsonlite)
library(RColorBrewer)
library(rgeos)
####################
# set directories
dir_M <- c('Windows' = '//mazu.nceas.ucsb.edu/ohi',
'Darwin'  = '/Volumes/ohi',    ### connect (cmd-K) to smb://mazu/ohi
'Linux'   = '/home/shares/ohi')[[ Sys.info()[['sysname']] ]]
if (Sys.info()[['sysname']] != 'Linux' & !file.exists(dir_M)){
warning(sprintf("The Mazu directory dir_M set in src/R/common.R does not exist. Do you need to mount Mazu: %s?", dir_M))
}
####################
# uses leaflet and htmlwidgets to save html file <- 2 options for PC/Mac
region_poly <- readOGR(dsn='/var/data/ohi/git-annex/Global/NCEAS-Regions_v2014/data/website_OHIplus_regions',
layer="allRegions")
# region_poly <- readOGR(dsn=file.path(dir_M, 'git-annex/Global/NCEAS-Regions_v2014/data/website_OHIplus_regions'),
#                        layer="allRegions")
region_poly_data <- read.csv('assets/maps/regions_shape.csv')
## This is run in case there are polygons in the shapefile that are no longer included:
region_poly <- region_poly[region_poly@data$country %in% region_poly_data$country, ]
## Add color data
colors <- data.frame(phase = c("active", "completed"),
color= c('#0083A3', '#00ADDD'))
region_poly@data <- region_poly@data %>%
left_join(region_poly_data, by="country") %>%
left_join(colors, by="phase")
popup_poly <- paste0('<b>', region_poly@data$display, '</b>',
'<br/>', "status: ", region_poly@data$phase)
## The data we want to display as points:
points <- read.csv("assets/maps/regions_point.csv")
popup_points <- paste0('<b>', points$display, '</b>',
'<br/>', "status: ", points$phase) # use this for new line: , "<br/>")
## point ideas:
##https://sites.google.com/site/gmapsdevelopment/
icon_new <- makeIcon(
iconUrl = "http://maps.google.com/mapfiles/ms/micons/blue-dot.png",
iconWidth = 25, iconHeight = 27,
iconAnchorX = 15, iconAnchorY =27)
m <- leaflet(width="100%", height="600px") %>%
setView(-30, 30, 2) %>%
addTiles(options=tileOptions(noWrap=TRUE)) %>%
#      addTiles(options=tileOptions(minZoom=3, noWrap=TRUE)) %>%
#addProviderTiles("OpenStreetMap.BlackAndWhite") %>%
#   addTiles(options = tileOptions(noWrap = TRUE)) %>%
#   fitBounds(-180, -70, 180, 80) %>%
addPolygons(data = region_poly,
#fillColor = myPalette(nrow(regionAll)),
fillColor = region_poly@data$color,
popup=popup_poly,
#stroke=FALSE,
color = "#A8A8A8",
weight = 1,
opacity = 0.5,
fillOpacity = 0.4) %>%
addMarkers(data=points, ~lon, ~lat, popup = ~as.character(popup_points), icon=icon_new)
saveWidget(m, file="allRegions.html", selfcontained=FALSE)
### move allRegions.html to the correct place in _includes subdirectory
unlink("_includes/themes/OHI/maps/allRegions.html", recursive=TRUE)
file.rename(from="allRegions.html", to="_includes/themes/OHI/maps/allRegions.html")
unlink("allRegions.html")
### move allRegions_files folder to the correct place in /projects/ohi-assessments
### although this seems overkill, the map won't display if these packages have been updated and there's a mismatch; see https://github.com/OHI-Science/issues/issues/625
unlink("projects/ohi-assessments/allRegions_files", recursive=TRUE) # delete old folder
warning('Now move `/allRegions_files` to `/projects/ohi-assessments/allRegions_files`!')
warning('Seriously, did you move `/allRegions_files` to `/projects/ohi-assessments/allRegions_files`!?')
# we should script this someday but actually a pain to loop through subdirectories and copy
## regions_get_master_list.r
# April 29, 2016 by @jules32
## Get master list of OHI and OHI+ countries from the private Google Spreadsheet 'OHI_CountriesMaster'
## for display on ohi-science.org/projects/ohi-assessments
## https://docs.google.com/spreadsheets/d/1Xh8-36cLCEa_bppqLJu-nukVgPDT8xVEd9nxEaPYKKg/edit#gid=2018368498
#### setup ----
library(googlesheets) # install.packages('googlesheets') # by Jenny Bryan
library(tidyverse)
library(readr)
## authorize googledocs -- requires user interaction with default browser
gs_auth(new_user = TRUE)
#### read in Google Sheet, previously gs_title('OHI_CountriesMaster')----
master_list <-  googlesheets::gs_url('https://docs.google.com/spreadsheets/d/1Xh8-36cLCEa_bppqLJu-nukVgPDT8xVEd9nxEaPYKKg/edit#gid=2018368498') %>%
googlesheets::gs_read()
head(master_list)
### archive copy of the Google Sheet in PRIVATE ohidev repo (not here); will need to push that repo too.
write.csv(master_list,
paste0('~/github/ohidev/OHI_CountriesMaster/OHI_CountriesMaster_', Sys.Date(), '.csv'))
#### parse information for display ----
## to be displayed, `display` column must have either 'point' or 'shapefile'
display_list <- master_list %>%
dplyr::select(country     = Country,
ohi_plus    = OHI_plus,
phase       = Phase,
map_display = Map_Display,
display     = Display,
lat         = Latitude,
lon         = Longitude) %>%
dplyr::filter(!is.na(display)) # remove rows that don't have point/shapefile
tail(display_list)
## count number of active and completed OHI+ countries ----
n_ohi_plus <- display_list %>%
filter(ohi_plus == 'YES')
n_ohi_plus_active <- n_ohi_plus %>%
filter(phase == 'active')
cat(sprintf('Total count of OHI+ assessments is %s!', dim(n_ohi_plus)[1]))
cat(sprintf('And %s are active, %s are completed OHI+ assessments.',
dim(n_ohi_plus_active)[1],
dim(n_ohi_plus)[1]- dim(n_ohi_plus_active)[1]))
## filter shapefiles to display
display_shp <-  display_list %>%
filter(map_display == 'shapefile')
## determine whether any shapefiles have been added:
old <- read.csv("assets/maps/regions_shape.csv")
if(length(setdiff(display_shp$country, old$country))>0){
warning('Countries with shapefiles have been added, will need to update the shapefile map')
}
## filter point data to display
display_pt <-  display_list %>%
filter(map_display == 'point')
# error if not all fields have lat/lon data. See https://github.com/OHI-Science/issues/issues/625#issuecomment-217511758
if (NA %in% display_pt$lat | NA %in% display_pt$lon){
stop(sprintf('Missing lat or lon field for region to be displayed. Must fix or will not map proplerly.\n'))
}
## determine whether any points have been added:
old <- read.csv("assets/maps/regions_point.csv")
if(length(setdiff(display_pt$country, old$country))>0){
warning('Countries with points have been added, will need to update the point map')
}
if (nrow(display_pt) + nrow(display_shp) != nrow(display_list)) {
warning('please make sure all the countries to display have either shapefiles or lat/longs')
}
write.csv(display_shp, "assets/maps/regions_shape.csv", row.names=FALSE)
write.csv(display_pt, "assets/maps/regions_point.csv", row.names=FALSE)
### This script creates the leaflet map for the ohi-science.org/projects/ohi-assessments
### NOTE: The two things created by leaflet must be moved after creation
## allRegions_files folder goes to: /projects/ohi-assessments. BY HAND! (for now). But do each time.
## allRegions.html         goes to: _includes/themes/OHI/maps
# For more information: http://zevross.com/blog/2014/04/11/using-r-to-quickly-create-an-interactive-online-map-using-the-leafletr-package/
# http://stackoverflow.com/questions/26435861/how-to-read-a-geojson-file-containing-feature-collections-to-leaflet-shiny-direc
# http://www.tuicode.com/article/5637dded499808840885af68
### Need to read in the shape files for each of these regions:
library(tidyverse)
library(sp)
library(rgdal)
library(raster)
# library(leafletR) # alternative method for visualization
library(leaflet)
library(htmlwidgets)
library(jsonlite)
library(RColorBrewer)
library(rgeos)
####################
# set directories
dir_M <- c('Windows' = '//mazu.nceas.ucsb.edu/ohi',
'Darwin'  = '/Volumes/ohi',    ### connect (cmd-K) to smb://mazu/ohi
'Linux'   = '/home/shares/ohi')[[ Sys.info()[['sysname']] ]]
if (Sys.info()[['sysname']] != 'Linux' & !file.exists(dir_M)){
warning(sprintf("The Mazu directory dir_M set in src/R/common.R does not exist. Do you need to mount Mazu: %s?", dir_M))
}
####################
# uses leaflet and htmlwidgets to save html file <- 2 options for PC/Mac
region_poly <- readOGR(dsn='/var/data/ohi/git-annex/Global/NCEAS-Regions_v2014/data/website_OHIplus_regions',
layer="allRegions")
# region_poly <- readOGR(dsn=file.path(dir_M, 'git-annex/Global/NCEAS-Regions_v2014/data/website_OHIplus_regions'),
#                        layer="allRegions")
region_poly_data <- read.csv('assets/maps/regions_shape.csv')
## This is run in case there are polygons in the shapefile that are no longer included:
region_poly <- region_poly[region_poly@data$country %in% region_poly_data$country, ]
## Add color data
colors <- data.frame(phase = c("active", "completed"),
color= c('#0083A3', '#00ADDD'))
region_poly@data <- region_poly@data %>%
left_join(region_poly_data, by="country") %>%
left_join(colors, by="phase")
popup_poly <- paste0('<b>', region_poly@data$display, '</b>',
'<br/>', "status: ", region_poly@data$phase)
## The data we want to display as points:
points <- read.csv("assets/maps/regions_point.csv")
popup_points <- paste0('<b>', points$display, '</b>',
'<br/>', "status: ", points$phase) # use this for new line: , "<br/>")
## point ideas:
##https://sites.google.com/site/gmapsdevelopment/
icon_new <- makeIcon(
iconUrl = "http://maps.google.com/mapfiles/ms/micons/blue-dot.png",
iconWidth = 25, iconHeight = 27,
iconAnchorX = 15, iconAnchorY =27)
m <- leaflet(width="100%", height="600px") %>%
setView(-30, 30, 2) %>%
addTiles(options=tileOptions(noWrap=TRUE)) %>%
#      addTiles(options=tileOptions(minZoom=3, noWrap=TRUE)) %>%
#addProviderTiles("OpenStreetMap.BlackAndWhite") %>%
#   addTiles(options = tileOptions(noWrap = TRUE)) %>%
#   fitBounds(-180, -70, 180, 80) %>%
addPolygons(data = region_poly,
#fillColor = myPalette(nrow(regionAll)),
fillColor = region_poly@data$color,
popup=popup_poly,
#stroke=FALSE,
color = "#A8A8A8",
weight = 1,
opacity = 0.5,
fillOpacity = 0.4) %>%
addMarkers(data=points, ~lon, ~lat, popup = ~as.character(popup_points), icon=icon_new)
saveWidget(m, file="allRegions.html", selfcontained=FALSE)
### move allRegions.html to the correct place in _includes subdirectory
unlink("_includes/themes/OHI/maps/allRegions.html", recursive=TRUE)
file.rename(from="allRegions.html", to="_includes/themes/OHI/maps/allRegions.html")
unlink("allRegions.html")
### move allRegions_files folder to the correct place in /projects/ohi-assessments
### although this seems overkill, the map won't display if these packages have been updated and there's a mismatch; see https://github.com/OHI-Science/issues/issues/625
unlink("projects/ohi-assessments/allRegions_files", recursive=TRUE) # delete old folder
warning('Now move `/allRegions_files` to `/projects/ohi-assessments/allRegions_files`!')
warning('Seriously, did you move `/allRegions_files` to `/projects/ohi-assessments/allRegions_files`!?')
# we should script this someday but actually a pain to loop through subdirectories and copy
airquality
summary(mtcars)
library(here)
here()
usethis::use_tidy_thanks("openscapes/demo")
usethis::use_rmarkdown_template()
usethis::use_readme_md()
usethis::use_readme_rmd()
usethis::use_tidy_coc()
#### setup ----
library(googlesheets) # install.packages('googlesheets') # by Jenny Bryan
library(tidyverse)
library(readr)
## authorize googledocs -- requires user interaction with default browser
gs_auth(new_user = TRUE)
#### read in Google Sheet, previously gs_title('OHI_CountriesMaster')----
master_list <-  googlesheets::gs_url('https://docs.google.com/spreadsheets/d/1Xh8-36cLCEa_bppqLJu-nukVgPDT8xVEd9nxEaPYKKg/edit#gid=2018368498') %>%
googlesheets::gs_read()
head(master_list)
tail(master_list)
### archive copy of the Google Sheet in PRIVATE ohidev repo (not here); will need to push that repo too.
write.csv(master_list,
paste0('~/github/ohidev/OHI_CountriesMaster/OHI_CountriesMaster_', Sys.Date(), '.csv'))
### archive copy of the Google Sheet in PRIVATE ohidev repo (not here); will need to push that repo too.
write.csv(master_list,
paste0('~/github/ohi-science/ohidev/OHI_CountriesMaster/OHI_CountriesMaster_', Sys.Date(), '.csv'))
#### parse information for display ----
## to be displayed, `display` column must have either 'point' or 'shapefile'
display_list <- master_list %>%
dplyr::select(country     = Country,
ohi_plus    = OHI_plus,
phase       = Phase,
map_display = Map_Display,
display     = Display,
lat         = Latitude,
lon         = Longitude) %>%
dplyr::filter(!is.na(display)) # remove rows that don't have point/shapefile
## count number of active and completed OHI+ countries ----
n_ohi_plus <- display_list %>%
filter(ohi_plus == 'YES')
n_ohi_plus
n_ohi_plus_active <- n_ohi_plus %>%
filter(phase == 'active')
cat(sprintf('Total count of OHI+ assessments is %s!', dim(n_ohi_plus)[1]))
cat(sprintf('And %s are active, %s are completed OHI+ assessments.',
dim(n_ohi_plus_active)[1],
dim(n_ohi_plus)[1]- dim(n_ohi_plus_active)[1]))
## filter shapefiles to display
display_shp <-  display_list %>%
filter(map_display == 'shapefile')
## determine whether any shapefiles have been added:
old <- read.csv("assets/maps/regions_shape.csv")
if(length(setdiff(display_shp$country, old$country))>0){
warning('Countries with shapefiles have been added, will need to update the shapefile map')
}
## filter point data to display
display_pt <-  display_list %>%
filter(map_display == 'point')
# error if not all fields have lat/lon data. See https://github.com/OHI-Science/issues/issues/625#issuecomment-217511758
if (NA %in% display_pt$lat | NA %in% display_pt$lon){
stop(sprintf('Missing lat or lon field for region to be displayed. Must fix or will not map proplerly.\n'))
}
## determine whether any points have been added:
old <- read.csv("assets/maps/regions_point.csv")
if(length(setdiff(display_pt$country, old$country))>0){
warning('Countries with points have been added, will need to update the point map')
}
if (nrow(display_pt) + nrow(display_shp) != nrow(display_list)) {
warning('please make sure all the countries to display have either shapefiles or lat/longs')
}
write.csv(display_shp, "assets/maps/regions_shape.csv", row.names=FALSE)
write.csv(display_pt, "assets/maps/regions_point.csv", row.names=FALSE)
### Need to read in the shape files for each of these regions:
library(tidyverse)
library(sp)
library(rgdal)
library(raster)
# library(leafletR) # alternative method for visualization
library(leaflet)
library(htmlwidgets)
library(jsonlite)
library(RColorBrewer)
library(rgeos)
####################
# set directories
dir_M <- c('Windows' = '//mazu.nceas.ucsb.edu/ohi',
'Darwin'  = '/Volumes/ohi',    ### connect (cmd-K) to smb://mazu/ohi
'Linux'   = '/home/shares/ohi')[[ Sys.info()[['sysname']] ]]
if (Sys.info()[['sysname']] != 'Linux' & !file.exists(dir_M)){
warning(sprintf("The Mazu directory dir_M set in src/R/common.R does not exist. Do you need to mount Mazu: %s?", dir_M))
}
####################
# uses leaflet and htmlwidgets to save html file <- 2 options for PC/Mac
# region_poly <- readOGR(dsn='/var/data/ohi/git-annex/Global/NCEAS-Regions_v2014/data/website_OHIplus_regions',
#                        layer="allRegions")
region_poly <- readOGR(dsn=file.path(dir_M, 'git-annex/Global/NCEAS-Regions_v2014/data/website_OHIplus_regions'),
layer="allRegions")
## This is run in case there are polygons in the shapefile that are no longer included:
region_poly <- region_poly[region_poly@data$country %in% region_poly_data$country, ]
region_poly_data <- read.csv('assets/maps/regions_shape.csv')
## This is run in case there are polygons in the shapefile that are no longer included:
region_poly <- region_poly[region_poly@data$country %in% region_poly_data$country, ]
## Add color data
colors <- data.frame(phase = c("active", "completed"),
color= c('#0083A3', '#00ADDD'))
region_poly@data <- region_poly@data %>%
left_join(region_poly_data, by="country") %>%
left_join(colors, by="phase")
popup_poly <- paste0('<b>', region_poly@data$display, '</b>',
'<br/>', "status: ", region_poly@data$phase)
## The data we want to display as points:
points <- read.csv("assets/maps/regions_point.csv")
popup_points <- paste0('<b>', points$display, '</b>',
'<br/>', "status: ", points$phase) # use this for new line: , "<br/>")
## point ideas:
##https://sites.google.com/site/gmapsdevelopment/
icon_new <- makeIcon(
iconUrl = "http://maps.google.com/mapfiles/ms/micons/blue-dot.png",
iconWidth = 25, iconHeight = 27,
iconAnchorX = 15, iconAnchorY =27)
m <- leaflet(width="100%", height="600px") %>%
setView(-30, 30, 2) %>%
addTiles(options=tileOptions(noWrap=TRUE)) %>%
#      addTiles(options=tileOptions(minZoom=3, noWrap=TRUE)) %>%
#addProviderTiles("OpenStreetMap.BlackAndWhite") %>%
#   addTiles(options = tileOptions(noWrap = TRUE)) %>%
#   fitBounds(-180, -70, 180, 80) %>%
addPolygons(data = region_poly,
#fillColor = myPalette(nrow(regionAll)),
fillColor = region_poly@data$color,
popup=popup_poly,
#stroke=FALSE,
color = "#A8A8A8",
weight = 1,
opacity = 0.5,
fillOpacity = 0.4) %>%
addMarkers(data=points, ~lon, ~lat, popup = ~as.character(popup_points), icon=icon_new)
saveWidget(m, file="allRegions.html", selfcontained=FALSE)
### move allRegions.html to the correct place in _includes subdirectory
unlink("_includes/themes/OHI/maps/allRegions.html", recursive=TRUE)
file.rename(from="allRegions.html", to="_includes/themes/OHI/maps/allRegions.html")
unlink("allRegions.html")
### move allRegions_files folder to the correct place in
### /projects/ohi-assessments although this seems overkill, the map won't
### display if these packages have been updated and there's a mismatch; see
### https://github.com/OHI-Science/issues/issues/625
unlink("projects/ohi-assessments/allRegions_files", recursive=TRUE) # delete old folder
warning('Now move `/allRegions_files` to `/projects/ohi-assessments/allRegions_files`!')
warning('Seriously, did you move `/allRegions_files` to `/projects/ohi-assessments/allRegions_files`!?')
source('~/github/ohi-science/ohi-science.github.io/assets/maps/regions_get_master_list.r')
library(googlesheets)
detach("package:googlesheets", unload = TRUE)
remove.packages("googlesheets")
install.packages('googlesheets4')
#### setup ----
library(googlesheets4) # install.packages('googlesheets') # by Jenny Bryan
